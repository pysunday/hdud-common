---
const themes = {
  light: 'light',
  dark: 'dark',
  ...(Astro.props.themes || {})
};

// 主题切换
const alpineData = ((themes) => {
  const getTheme = (isDark) => (isDark ? themes.dark : themes.light);
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return getTheme(window.matchMedia('(prefers-color-scheme: dark)').matches);
	};
  return {
    isDark: getThemePreference() === themes.dark,
    start() {
      this.update(getTheme(this.isDark));
      this.$watch('isDark', val => this.update(getTheme(val)));
    },
    update(theme) {
      document.documentElement.setAttribute('data-theme', theme); 
      localStorage.setItem('theme', theme);
    }
  }
}).toString();
---

<div 
  x-data={`(${alpineData})(${JSON.stringify(themes)})`}
  x-init="start()"
>
  <label class="swap swap-rotate cursor-pointer">
    <input type="checkbox" x-model="isDark" class="theme-controller" />

    <span class="swap-on size-8 fill-current icon-[flowbite--sun-outline]" />
    <span class="swap-off size-8 fill-current icon-[line-md--moon]" />
  </label>
</div>

<script is:inline define:vars={{ themes }}>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? themes.dark : themes.light;
	};
  document.documentElement.setAttribute('data-theme', getThemePreference());
</script>
